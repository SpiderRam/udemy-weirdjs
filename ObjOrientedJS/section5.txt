Inheritance:
    - One object gets access to the properties and methods of another object.
    - Classical Inheritance is the way it's been done for a long time (in C#, among others)
        * It is not necessarily a bad approach, it has been around for a long time and has been popular
        * It is very verbose and sometimes overly complex
    - Prototypal Inheritance is newer, and different than inheritance used in other programming languages.
        * Simple, flexible, and easier to understand than Classical Inheritance
        * The 'protoype' refers to the proto property inherent to all objects in JavaScript (obj.__proto__)
        * A __proto__ object can in turn have its own __proto__ object, ad infinitum, creating a prototype chain.
        * If there is no property by the referenced name on the object itself, the JavaScript engine will go down the chain until it finds that property.
        * obj1 and obj2 are accessing the same properties through theie __proto__ objects, they occupy the same space in memory.